---
name: build

on:
  push:
  pull_request:
    branches: [main, develop]
  merge_group:

jobs:
  build-linux:
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        build_type: [Debug, Release]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: UmatiGateway

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0"

      - name: Restore dependencies
        run: |
          cd UmatiGateway
          dotnet restore

      - name: Install deb packaging tool
        run: |
          cd UmatiGateway/UmatiGateway
          dotnet tool install --global dotnet-deb
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet deb install

      - name: build and package
        run: |
          cd UmatiGateway/UmatiGateway
          dotnet deb --configuration ${{ matrix.build_type }} --output ../umati-gateway.deb

      - name: Upload Debian Package
        uses: actions/upload-artifact@v4
        with:
          name: UmatiGateway-${{ matrix.os }}-${{ matrix.build_type }}
          path: UmatiGateway/umati-gateway.deb

  build-windows:
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        build_type: [Debug, Release]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0"

      - name: Restore Dependencies
        run: dotnet restore UmatiGateway.sln

      - name: Build Application
        run: dotnet build UmatiGateway.sln --configuration ${{ matrix.build_type }}

      - name: Run Tests
        run: dotnet test UmatiGateway.sln --configuration ${{ matrix.build_type }}

      - name: Publish Application
        run: dotnet publish UmatiGateway.sln --configuration ${{ matrix.build_type }} --output ./publish

      - name: Upload Published Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: UmatiGateway-${{ matrix.os }}-${{ matrix.build_type }}
          path: ./publish

  docker:
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: UmatiGateway
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        # yamllint disable rule:line-length
      - name: PrepareReg Names
        # yamllint disable rule:line-length
        run: |
          #! /bin/bash
          #shellcheck  disable=SC2296
          echo IMAGE_REPOSITORY="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          echo IMAGE_TAG="$(echo "${{ github.ref }}" | tr '[:upper:]' '[:lower:]' |  awk '{sub(/([^\/]*\/){2}/,""); gsub(/\/|_/, "-")}1')" >> "$GITHUB_ENV"
        # yamllint enable rule:line-length
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.10.0
        with:
          context: ./UmatiGateway
          file: ./UmatiGateway/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
          provenance: false

  release:
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    needs: [build-linux, build-windows, docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v7
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          repo: ${{ github.repository }}
          commit: ${{ github.event.pull_request.head.sha }}
          if_no_artifact_found: fail
          skip_unpack: true

      - name: Checksum
        run: |
          sha256sum ./*.deb ./*.zip > SHA256-checksums

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ./*.deb
            ./*.zip
            SHA256-checksums
